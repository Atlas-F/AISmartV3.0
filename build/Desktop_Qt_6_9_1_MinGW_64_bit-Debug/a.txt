// 似乎可以通过让该类继承自commandsystem，然后指定输出为outputarea
// commandsystem 已经有连接信号槽，将输入指定重定向到outputarea

// class TerminalWidget : public QTextEdit
// class TerminalWidget : public CommandSystem {
//     QProcess* process;

// public:

//     TerminalWidget(QWidget* parent = nullptr) : CommandSystem(parent) {
//         process = new QProcess(this);
//         qDebug()<< "terminaltest  init";
//         // 连接信号
//         connect(process, &QProcess::readyReadStandardOutput, [=](){
//             outputArea->append(process->readAllStandardOutput());
//         });

//         connect(process, &QProcess::readyReadStandardError, [=](){
//             outputArea->append("<span style='color:red'>" +
//                    process->readAllStandardError() + "</span>");
//         });

// // 启动命令解释器
// #ifdef Q_OS_WIN
//         process->start("cmd.exe");
// #endif

//         // 设置提示符
//         outputArea->append("Microsoft Windows [Version 10.0.19045.3803]");
//         outputArea->append("(c) Microsoft Corporation. All rights reserved.");
//         outputArea->append("FakeTerminal:\\>");
//     }

// protected:
//     // void keyPressEvent(QKeyEvent* event) override
//     void keyPressEvent(QKeyEvent* event)  {
//         if (event->key() == Qt::Key_Return) {
//             // 获取当前行命令

//             int lastSeparatorPos = outputArea->textCursor().block().text().lastIndexOf('>');

//             QString command = outputArea->textCursor().block().text().mid(lastSeparatorPos+1);
//             // 发送命令到进程
//             process->write(command.toUtf8() + "\r\n");

//             // 添加新提示符
//             // append("C:\\>");
//         }
//         else {
//             // QTextEdit::keyPressEvent(event);
//             qDebug()<< "keyPressEvent  failed";
//         }
//     }
// };